#!/usr/bin/env node

/**
 * Module dependecies.
 */

var norq = require('norq')
  , repl = require('repl')
  , fs = require('fs')
  , exec = require('child_process').exec;

/**
 * Norq Version
 */

var version = '0.0.0';

/**
 * Norq Help
 */

var help = 'RTFM';

/**
 * Default config
 * 
 * Is there a concise way to merge norq.config with defaults? 
 * JS is great but I'm sometimes missing Clojure...
 */

var defaults = {
    name: 'default'
  , redis: { host: '127.0.0.1', port: 6379 }
  , http: { port: 5150 }
  , logs: [ 'Console'
          , { transport: 'File'
            , options: { filename: 'logs/http.log' }}]
  , model: {
      default: {
        name: 'default'
      , options: {}
    }  
  }
}

/**
 * Argument Aliases
 */

var aliases = { 
  '-h': 'help',
  '--help': 'help',
  '-v': 'version',
  '--version': 'version'
};

/**
 * Get args and replace aliases
 */

var args = process.argv.slice(2).map(function (arg) {
  return aliases[arg] || arg;
});

/**
 * The first arg is a command which stands alone or 
 * determines the meaning of other args
 */

var command = args.shift();

switch (command) {
  case 'version':
    console.log(version);
    process.exit(1);
    break;

  case 'help':
    console.log(help);
    process.exit(1);
    break;

  case 'http':
    // have to insert logger before the router; this is kind of ugly
    norq.server.stack.splice(2, 0, 
                            { route: '', 
                              handle: norq.logger(defaults) });
    norq.server.norq_client.model = norq.config.model;

    // instead of the above, I want to be able to just write
    // var server = norq.createServer(norq.config);
    // server.listen(); // where port is already derived internally from config

    norq.server.listen(5150);
    console.log('Norq HTTP server listening on port %d', norq.server.address().port);
    break;

  case 'repl':
    // need to "exit on exit"? and add a line break in the shell
    // process.on('exit', ...) doesn't work directly?
    var context = repl.start('norq> ').context;
    context.norq = norq;
    context.client = norq.createClient(norq.config);
    break;

  case 'init':
    // check for existing file first
    fs.writeFile('./norq.json', JSON.stringify(defaults), function () {
      process.exit(1);  
    });
    break;

  default:
    // next line should eventually just be
    // var client = norq.createClient(config);

    var client = norq.createClient(norq.config);
    var operation = client[command];
    if (operation) {
      args.push(function (err, result) { 
        norq.print(err, result); 
        process.exit(1);
      });
      operation.apply(client, args);
    } else {
      console.log('Ich weiss es nicht!');  
      process.exit(1);
    }
    break;
}
